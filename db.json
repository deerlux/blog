{"Asset":[{"_id":"themes/pacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":false},{"_id":"themes/pacman/source/img/author.jpg","path":"img/author.jpg","modified":false},{"_id":"themes/pacman/source/img/favicon.ico","path":"img/favicon.ico","modified":false},{"_id":"themes/pacman/source/img/logo.svg","path":"img/logo.svg","modified":false},{"_id":"themes/pacman/source/img/pacman.jpg","path":"img/pacman.jpg","modified":false},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","path":"js/jquery-2.1.0.min.js","modified":false},{"_id":"themes/pacman/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/pacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"source/img/docker-architecture.svg","path":"img/docker-architecture.svg","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1412952864000},{"_id":"scaffolds/page.md","mtime":1412952864000},{"_id":"scaffolds/photo.md","mtime":1412952864000},{"_id":"scaffolds/post.md","mtime":1412952864000},{"_id":"source/_posts/hello-world.md","mtime":1412952864000},{"_id":"source/_posts/三体.md","mtime":1413037291000},{"_id":"source/_posts/三体.md~","mtime":1413037174000},{"_id":"source/_posts/反欺骗的艺术.md","mtime":1413034938000},{"_id":"source/_posts/反欺骗的艺术.md~","mtime":1413034878000},{"_id":"themes/pacman/LICENSE","mtime":1413040842000},{"_id":"themes/pacman/README.md","mtime":1413040842000},{"_id":"themes/pacman/_config.yml","mtime":1413042378000},{"_id":"themes/pacman/languages/default.yml","mtime":1413040842000},{"_id":"themes/pacman/languages/zh-CN.yml","mtime":1413040842000},{"_id":"themes/pacman/languages/zh-TW.yml","mtime":1413040842000},{"_id":"themes/pacman/scripts/fancybox.js","mtime":1413040842000},{"_id":"themes/pacman/layout/archive.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/category.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/index.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/layout.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/page.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/post.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/tag.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_widget/archive.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_widget/category.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_widget/links.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_widget/rss.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_widget/tag.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_widget/tagcloud.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/after_footer.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/archive.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/article.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/categories.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/footer.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/google_analytics.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/head.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/header.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/pagination.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/search.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/sidebar.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/tags.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/post/article.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/post/catetags.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/post/comment.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/post/footer.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/post/gallery.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/post/header.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/post/jiathis.ejs","mtime":1413040842000},{"_id":"themes/pacman/layout/_partial/post/pagination.ejs","mtime":1413040842000},{"_id":"themes/pacman/source/font/FontAwesome.otf","mtime":1413040843000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","mtime":1413040843000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","mtime":1413040843000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","mtime":1413040843000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","mtime":1413040843000},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","mtime":1413040843000},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","mtime":1413040843000},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","mtime":1413040843000},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","mtime":1413040843000},{"_id":"themes/pacman/source/img/author.jpg","mtime":1413040843000},{"_id":"themes/pacman/source/img/favicon.ico","mtime":1413040843000},{"_id":"themes/pacman/source/img/logo.svg","mtime":1413040843000},{"_id":"themes/pacman/source/img/pacman.jpg","mtime":1413040843000},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","mtime":1413040843000},{"_id":"themes/pacman/source/css/style.styl","mtime":1413040843000},{"_id":"themes/pacman/source/css/_base/code.styl","mtime":1413040842000},{"_id":"themes/pacman/source/css/_base/font.styl","mtime":1413040842000},{"_id":"themes/pacman/source/css/_base/public.styl","mtime":1413040842000},{"_id":"themes/pacman/source/css/_base/variable.styl","mtime":1413040842000},{"_id":"themes/pacman/source/css/_partial/article.styl","mtime":1413040842000},{"_id":"themes/pacman/source/css/_partial/aside.styl","mtime":1413040842000},{"_id":"themes/pacman/source/css/_partial/duoshuo.styl","mtime":1413040842000},{"_id":"themes/pacman/source/css/_partial/footer.styl","mtime":1413040842000},{"_id":"themes/pacman/source/css/_partial/gallery.styl","mtime":1413040842000},{"_id":"themes/pacman/source/css/_partial/header.styl","mtime":1413040843000},{"_id":"themes/pacman/source/css/_partial/helper.styl","mtime":1413040843000},{"_id":"themes/pacman/source/css/_partial/index.styl","mtime":1413040843000},{"_id":"themes/pacman/source/fancybox/blank.gif","mtime":1413040843000},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","mtime":1413040843000},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","mtime":1413040843000},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","mtime":1413040843000},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","mtime":1413040843000},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","mtime":1413040843000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","mtime":1413040843000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","mtime":1413040843000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","mtime":1413040843000},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","mtime":1413040843000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1413040843000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1413040843000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1413040843000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1413040843000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1413040843000},{"_id":"themes/pacman/_config.yml~","mtime":1413042289000},{"_id":"source/_posts/hexo-blog.md","mtime":1413297411000},{"_id":"source/_posts/hexo-blog.md~","mtime":1413297333000},{"_id":"source/_posts/数据之巅.md","mtime":1413295722000},{"_id":"source/_posts/数据之巅.md~","mtime":1413295711000},{"_id":"source/_posts/sqlalchemy.md","mtime":1414073043000},{"_id":"source/_posts/sqlalchemy.md~","mtime":1414072966000},{"_id":"source/_posts/guochan-os.md","mtime":1414159990000},{"_id":"source/_posts/guochan-os.md~","mtime":1414159949000},{"_id":"source/_posts/understanding-docker.md","mtime":1423485428000},{"_id":"source/_posts/understanding-docker.md~","mtime":1423485422000},{"_id":"source/img/docker-architecture.svg","mtime":1415453698000},{"_id":"source/_posts/haomama.md","mtime":1416065030000},{"_id":"source/_posts/haomama.md~","mtime":1416064728000}],"Category":[],"Page":[],"Post":[{"title":"Hello World","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">trobuleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick_Start\">Quick Start</h2>\n<h3 id=\"Create_a_new_post\">Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run_server\">Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate_static_files\">Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy_to_remote_sites\">Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","source":"_posts/hello-world.md","raw":"title: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [trobuleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)","slug":"hello-world","date":1412952864000,"updated":1412952864000,"excerpt":"","_id":"jmpvt3i2h1fhycfr","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"三体——中国作家写的具有世界级水准的科幻小说","date":1413037174000,"tags":["zwxrxagyy43uw0zo"],"content":"<p>deerlux@163.com 2014年 09月 30日</p>\n<p>宇宙中到底有没有其他生命体或文明？</p>\n<p>如果有的话，对地球来说到底意味着什么？<br>人类五千年的文明发展史如果拿到宇宙以亿年为单位的深化过程中应该如何看待？</p>\n<p>如果地球的末日来临人类社会将呈现一种什么样的状态？</p>\n<p>人类要为自己的无知傲慢和自私付出什么样的代价？是人类才有的特性吗？</p>\n<p>作者铺开了一幅宏大的宇宙、太阳系的发展脉络画面，凭自己深厚的物理学识和哲学思考<br>向我们展示了几个世纪的地球文明发展与存亡。以下内容涉及剧透，不喜勿喷。</p>\n<p>第一部讲的是受文革深度迫害的而对人类丑恶深恶痛绝的苦情女最终变成愤世女，发现了<br>太阳可以放大地球上发出的电磁波，从而使人类向外星系发出召唤的功率达到恒星的级别<br>，这个信号当然被外星文明收到了，而且是因受三体无规律运行而苦苦挣扎寻求一块更适<br>合生存地的文明。于是他们在同样对人类丑恶感到失望的愤世男及其三体组织的帮助下，<br>用两个光速运行的智子锁死了地球的基础研究，方法很简单，以光速干扰你所有的粒子对<br>撞机，并且将地球上所有的信息实时传送给了三体。战争还没有开始，地球对三体世界已<br>经是战场透明了，三体派出了一支舰队，四个世纪便可以到达地球。</p>\n<p>第二部。三体文明思维透明，不会撒谎，而人类撒谎的本领估计放在宇宙的角度也可以名<br>列前矛，不利用这个优势简直是浪费，但人类除了思想外的一切对于三体世界已经透明了<br>，所以人类想用自己撒谎的本领启动了面壁计划掩饰自己真正的战略意图。四位面壁者被<br>赋予了很大的权利运用地球上的一切资源，两个都失败了，被地球上三体支持者们直接识<br>破。人类对于战胜三体看来基本无望了，那又何必担心四个世纪之后的末日呢，安心享受<br>现在吧，”给岁月以文明，而不是给文明以岁月”，于是人类的觉悟反而迎来了新的繁荣，<br>科技的发展榨取了基础理论积累的最后一点价值，使人类的舰队比三体舰队速度还要快，<br>人类完全有理由相信战胜三体指日可待，然而真正在末日之战来临时人类的傲慢以及与外<br>星文明的差距彻底毁灭了人类生存的希望，三千支恒星级战舰组成的傲慢的舰队瞬间被毁<br>，人类还有没有生存的希望？宇宙文明有两个公理，由这两个公理可以推导出宇宙社会学<br>，而宇宙社会学中最重要的黑暗森林法则是三体世界的命门，这个命门最终被面壁者发现<br>。并且已经试验证实，一颗恒星受光粒打击被灭，宇宙中存在无数的文明，如果你暴露了<br>自己，高级文明如何知道你是善意还是恶意，但为了生存还是先把你灭了吧，连三体也对<br>这种其他文明的打击很是惧怕，人类掌握了这个命门后以与三体同归于尽胁迫三体世界，<br>从而造成一种基于威慑的战略平衡，人类得以延续。</p>\n<p>第三部的画面最为宏大。屌丝男临死得到一笔钱，他用这钱向联合国买了颗不起眼的星星<br>送给了自己暗恋的白富美，白富美参与了一项将一颗人类大脑送到三体航队云的计划，于<br>是屌丝男的大脑被很悲催的送走了。由于威慑的存在，人类与三体相安多年，使人类几乎<br>都忘记了三体的攻击性，所以将威慑的决策权给了一个充满爱的白富美。三体人早就判断<br>出这个充满爱的白富美不会启动同归于尽的威慑，于是迅速做出行动，毁灭你与你何干。<br>人类被三体人赶到了澳大利亚，人类在这块仅留在大陆上可以互相为粮食，直到数目减少<br>到这块大陆适合生存的地步。好在逃逸在外太空的一艘战舰上还有一群没那么有爱的人类<br>，向宇宙广播了三体的坐标，三体世界被灭，太阳系被灭只是时间问题，剩下的三体人也<br>没有精力和地球人耗下去了。人类自以为是的启动了掩体计划，以为在太阳系受到打击时<br>自己能够通过躲在远日行星的背面免于一死，孰不知如此简单的道理对于能够灭绝一个恒<br>星系的文明来讲能不明白吗。 屌丝男的大脑最终是被三体舰队捕获了，并且获得了新生，<br>逃走的这批三体人允许他给白富美一次对话，屌丝男通过三个童话故事告诉人类如何生存<br>下去，但人类却没有最终理解这三个童话故事的内涵，恒星级的灭绝就来临了。这次更狠<br>，将整个太阳系直接降维到一个二维平面，这是神一级的同归于尽的灭绝方式。白富美最<br>终靠空间曲率驱动的光速飞船逃了出去，也最终悟出了屌丝男三个童话的全部内涵，空间<br>曲率驱动的光速飞船一方面可以逃逸另一方面可以造成一片慢雾，以了降低光速的代价将<br>太阳系被神级文明看作是安全的。但一切为时已晚，以光速飞行的飞船大幅度穿越时空，<br>到达了屌丝男送她的星星的行星上，幸运的是这颗星星物理条件适合人居住，不幸的是人<br>文环境不适合，这是其他文明星际战争的路线。神级文明可以改变宇宙规律，可以再造宇<br>宙，当全宇宙降维，在这里仅有的人类何去何从。</p>\n","source":"_posts/三体.md","raw":"title: 三体——中国作家写的具有世界级水准的科幻小说\ndate: 2014-10-11 22:19:34\ntags: 读书笔记\n---\n\ndeerlux@163.com 2014年 09月 30日\n\n宇宙中到底有没有其他生命体或文明？\n\n如果有的话，对地球来说到底意味着什么？\n人类五千年的文明发展史如果拿到宇宙以亿年为单位的深化过程中应该如何看待？\n\n如果地球的末日来临人类社会将呈现一种什么样的状态？\n\n人类要为自己的无知傲慢和自私付出什么样的代价？是人类才有的特性吗？\n\n作者铺开了一幅宏大的宇宙、太阳系的发展脉络画面，凭自己深厚的物理学识和哲学思考\n向我们展示了几个世纪的地球文明发展与存亡。以下内容涉及剧透，不喜勿喷。\n\n第一部讲的是受文革深度迫害的而对人类丑恶深恶痛绝的苦情女最终变成愤世女，发现了\n太阳可以放大地球上发出的电磁波，从而使人类向外星系发出召唤的功率达到恒星的级别\n，这个信号当然被外星文明收到了，而且是因受三体无规律运行而苦苦挣扎寻求一块更适\n合生存地的文明。于是他们在同样对人类丑恶感到失望的愤世男及其三体组织的帮助下，\n用两个光速运行的智子锁死了地球的基础研究，方法很简单，以光速干扰你所有的粒子对\n撞机，并且将地球上所有的信息实时传送给了三体。战争还没有开始，地球对三体世界已\n经是战场透明了，三体派出了一支舰队，四个世纪便可以到达地球。\n\n第二部。三体文明思维透明，不会撒谎，而人类撒谎的本领估计放在宇宙的角度也可以名\n列前矛，不利用这个优势简直是浪费，但人类除了思想外的一切对于三体世界已经透明了\n，所以人类想用自己撒谎的本领启动了面壁计划掩饰自己真正的战略意图。四位面壁者被\n赋予了很大的权利运用地球上的一切资源，两个都失败了，被地球上三体支持者们直接识\n破。人类对于战胜三体看来基本无望了，那又何必担心四个世纪之后的末日呢，安心享受\n现在吧，\"给岁月以文明，而不是给文明以岁月\"，于是人类的觉悟反而迎来了新的繁荣，\n科技的发展榨取了基础理论积累的最后一点价值，使人类的舰队比三体舰队速度还要快，\n人类完全有理由相信战胜三体指日可待，然而真正在末日之战来临时人类的傲慢以及与外\n星文明的差距彻底毁灭了人类生存的希望，三千支恒星级战舰组成的傲慢的舰队瞬间被毁\n，人类还有没有生存的希望？宇宙文明有两个公理，由这两个公理可以推导出宇宙社会学\n，而宇宙社会学中最重要的黑暗森林法则是三体世界的命门，这个命门最终被面壁者发现\n。并且已经试验证实，一颗恒星受光粒打击被灭，宇宙中存在无数的文明，如果你暴露了\n自己，高级文明如何知道你是善意还是恶意，但为了生存还是先把你灭了吧，连三体也对\n这种其他文明的打击很是惧怕，人类掌握了这个命门后以与三体同归于尽胁迫三体世界，\n从而造成一种基于威慑的战略平衡，人类得以延续。\n\n第三部的画面最为宏大。屌丝男临死得到一笔钱，他用这钱向联合国买了颗不起眼的星星\n送给了自己暗恋的白富美，白富美参与了一项将一颗人类大脑送到三体航队云的计划，于\n是屌丝男的大脑被很悲催的送走了。由于威慑的存在，人类与三体相安多年，使人类几乎\n都忘记了三体的攻击性，所以将威慑的决策权给了一个充满爱的白富美。三体人早就判断\n出这个充满爱的白富美不会启动同归于尽的威慑，于是迅速做出行动，毁灭你与你何干。\n人类被三体人赶到了澳大利亚，人类在这块仅留在大陆上可以互相为粮食，直到数目减少\n到这块大陆适合生存的地步。好在逃逸在外太空的一艘战舰上还有一群没那么有爱的人类\n，向宇宙广播了三体的坐标，三体世界被灭，太阳系被灭只是时间问题，剩下的三体人也\n没有精力和地球人耗下去了。人类自以为是的启动了掩体计划，以为在太阳系受到打击时\n自己能够通过躲在远日行星的背面免于一死，孰不知如此简单的道理对于能够灭绝一个恒\n星系的文明来讲能不明白吗。 屌丝男的大脑最终是被三体舰队捕获了，并且获得了新生，\n逃走的这批三体人允许他给白富美一次对话，屌丝男通过三个童话故事告诉人类如何生存\n下去，但人类却没有最终理解这三个童话故事的内涵，恒星级的灭绝就来临了。这次更狠\n，将整个太阳系直接降维到一个二维平面，这是神一级的同归于尽的灭绝方式。白富美最\n终靠空间曲率驱动的光速飞船逃了出去，也最终悟出了屌丝男三个童话的全部内涵，空间\n曲率驱动的光速飞船一方面可以逃逸另一方面可以造成一片慢雾，以了降低光速的代价将\n太阳系被神级文明看作是安全的。但一切为时已晚，以光速飞行的飞船大幅度穿越时空，\n到达了屌丝男送她的星星的行星上，幸运的是这颗星星物理条件适合人居住，不幸的是人\n文环境不适合，这是其他文明星际战争的路线。神级文明可以改变宇宙规律，可以再造宇\n宙，当全宇宙降维，在这里仅有的人类何去何从。\n","slug":"三体","updated":1413037291000,"excerpt":"","_id":"i5y2v58kn5n4101t","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"反欺骗的艺术——一本权威全面的骗子和反骗子指南","date":1413034699000,"tags":["zwxrxagyy43uw0zo"],"content":"<p><strong>反欺骗的艺术</strong></p>\n<p>Kevin d. Mitnick, William L. Simon 著，潘爱民 译<br>清华大学出版社，2014年9月第1版。</p>\n<h2 id=\"读后感\">读后感</h2>\n<p>忘记从什么地方看到了这本书的推荐了，米特尼克——社会工程学的始祖，写了一本欺骗的<br>艺术，于是上网找看有没有中译本，结果找到了一本反欺骗的艺术，还以为此大牛又写了<br>本，仔细一看这本书的英文封面才明白，The art of Deception，就是我要找的这本书，<br>而且中译本刚刚出版。对我国出版业（或是出版监管部门）我说什么呢，明明叫欺骗的艺<br>术，为什么不忠实原著呢，可是看完这本书后还真有些理解这些人的良苦。</p>\n<p>这是一本讲信息安全的书，看似是一本技术性较强的书，但其实和技术其实没多大关系，<br>书中举了大量的社交工程师利用简单的或复杂的社交技能，从而使技术严密的安全系统形<br>同虚设，以达到从企业获取敏感信息的目的。这些例子中，攻击者要常常冒充其他部门的<br>新手、行政助理、合作伙伴、机房管理员、信息技术服务商等角色，受害者从保安、助理<br>、接线员到核心岗位人员均有，运用一定的社交技巧再辅以部分技术手段，使一些经验丰<br>富的社交工程师几乎无往不利。但所有这些例子几乎都有个共同点，即受害者均以为行骗<br>者是他们声称的那个人。书中最后也给出了人们为什么会犯这样的错误，实际上是骗子们<br>利用了一些人类的天性，人们倾向于相信几类人：权威、讨人喜欢的人、帮助的施予者、<br>和其他值得信任的人行为一致的人、满足自己贪欲的人等等。所有这些东西实际上都在说<br>明在信息安全领域，人是最关键也是很脆弱的一个环节，如果人这个环节出了问题，再多<br>的技术防范措施都是徒劳。很多企业在构建安全体系时并没有把人的因素给予充分的重视<br>，从而使这些社交工程师们总能够得逞。</p>\n<h2 id=\"杂感1\">杂感1</h2>\n<p>读这本书的过程中看到作者举的那些例子我还在想，他那些例子中的受害者如果是在中国<br>的话可能未必那么容易受骗，我国是个骗子横行的国度，很多人都已经具备了一定的防骗<br>常识了，一些社交工程师的骗术在讲究诚信的美国能够成功在中国倒也未必成功。想到这<br>一点，自己心里的滋味都不知是庆幸还是难堪了。</p>\n<h2 id=\"我现实生活中遇到的两起行骗事件\">我现实生活中遇到的两起行骗事件</h2>\n<p>我实际遇到过两起行骗的案件，第一次有人声称我买的车有优惠退税，让我提供一个卡号<br>，我留了个心眼，留了个错的卡号，果不其然，对方还要我的密码，钱的转入是不需要密<br>码的，这个常识我还是懂得的，况且此人声称是北京税务部门的人却操一口南方口音，打<br>死我也不相信北京的税务局会有人这么重的南方口音。第二次，我在药房网买药的记录被<br>盗，攻击者号称是药房网的客服，说有一笔交易本来我已经付款了，但是系统出问题误将<br>这次交易设置成了分期付款，要帮我取消。这个骗子还注册了一个和药房网的客服电话十<br>分像的电话，药房网的电话是 <code>4006509988</code> ，这个骗子来电的号码显示是<br><code>+4006509988</code> ，我差点就相信了。后来打电话到药房网再次确认，官方客服说这是一<br>起行骗，而且已经接到了其他用户的投诉了。再后来那人再打电话给我，被我骂了一通。<br>我在挫败这起行骗时实际上用到了书中所提到的一条重要的防骗经验，回电确认对方是他<br>声称的那个人。</p>\n<h2 id=\"杂感2\">杂感2</h2>\n<p>这本书不能落入骗子之手。</p>\n","source":"_posts/反欺骗的艺术.md","raw":"title: 反欺骗的艺术——一本权威全面的骗子和反骗子指南\ndate: 2014-10-11 21:38:19\ntags: 读书笔记\n---\n\n**反欺骗的艺术**\n\nKevin d. Mitnick, William L. Simon 著，潘爱民 译\n清华大学出版社，2014年9月第1版。\n\n读后感\n------\n\n忘记从什么地方看到了这本书的推荐了，米特尼克——社会工程学的始祖，写了一本欺骗的\n艺术，于是上网找看有没有中译本，结果找到了一本反欺骗的艺术，还以为此大牛又写了\n本，仔细一看这本书的英文封面才明白，The art of Deception，就是我要找的这本书，\n而且中译本刚刚出版。对我国出版业（或是出版监管部门）我说什么呢，明明叫欺骗的艺\n术，为什么不忠实原著呢，可是看完这本书后还真有些理解这些人的良苦。\n\n这是一本讲信息安全的书，看似是一本技术性较强的书，但其实和技术其实没多大关系，\n书中举了大量的社交工程师利用简单的或复杂的社交技能，从而使技术严密的安全系统形\n同虚设，以达到从企业获取敏感信息的目的。这些例子中，攻击者要常常冒充其他部门的\n新手、行政助理、合作伙伴、机房管理员、信息技术服务商等角色，受害者从保安、助理\n、接线员到核心岗位人员均有，运用一定的社交技巧再辅以部分技术手段，使一些经验丰\n富的社交工程师几乎无往不利。但所有这些例子几乎都有个共同点，即受害者均以为行骗\n者是他们声称的那个人。书中最后也给出了人们为什么会犯这样的错误，实际上是骗子们\n利用了一些人类的天性，人们倾向于相信几类人：权威、讨人喜欢的人、帮助的施予者、\n和其他值得信任的人行为一致的人、满足自己贪欲的人等等。所有这些东西实际上都在说\n明在信息安全领域，人是最关键也是很脆弱的一个环节，如果人这个环节出了问题，再多\n的技术防范措施都是徒劳。很多企业在构建安全体系时并没有把人的因素给予充分的重视\n，从而使这些社交工程师们总能够得逞。\n\n杂感1\n-----\n\n读这本书的过程中看到作者举的那些例子我还在想，他那些例子中的受害者如果是在中国\n的话可能未必那么容易受骗，我国是个骗子横行的国度，很多人都已经具备了一定的防骗\n常识了，一些社交工程师的骗术在讲究诚信的美国能够成功在中国倒也未必成功。想到这\n一点，自己心里的滋味都不知是庆幸还是难堪了。\n\n我现实生活中遇到的两起行骗事件\n-------------------------------\n\n我实际遇到过两起行骗的案件，第一次有人声称我买的车有优惠退税，让我提供一个卡号\n，我留了个心眼，留了个错的卡号，果不其然，对方还要我的密码，钱的转入是不需要密\n码的，这个常识我还是懂得的，况且此人声称是北京税务部门的人却操一口南方口音，打\n死我也不相信北京的税务局会有人这么重的南方口音。第二次，我在药房网买药的记录被\n盗，攻击者号称是药房网的客服，说有一笔交易本来我已经付款了，但是系统出问题误将\n这次交易设置成了分期付款，要帮我取消。这个骗子还注册了一个和药房网的客服电话十\n分像的电话，药房网的电话是 ``4006509988`` ，这个骗子来电的号码显示是\n``+4006509988`` ，我差点就相信了。后来打电话到药房网再次确认，官方客服说这是一\n起行骗，而且已经接到了其他用户的投诉了。再后来那人再打电话给我，被我骂了一通。\n我在挫败这起行骗时实际上用到了书中所提到的一条重要的防骗经验，回电确认对方是他\n声称的那个人。\n\n杂感2\n------\n\n这本书不能落入骗子之手。\n\n\n","slug":"反欺骗的艺术","updated":1413034938000,"excerpt":"","_id":"p8vajo8vb6hsidju","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"hexo + github 发布静态博客","date":1413042500000,"tags":["08my9oyremlr52if"],"content":"<p>网上的教程很多，我这里只讲一下干货，也是自己的一个备忘。</p>\n<h1 id=\"安装node-js\">安装node.js</h1>\n<p>以archlinux下为例，其他的发行版请自行查找相关的软件包。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pacman -S nodejs</div></pre></td></tr></table></figure>\n\n<h1 id=\"系统中安装hexo\">系统中安装hexo</h1>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">sudo</span> npm install -g hexo</div></pre></td></tr></table></figure>\n\n<h1 id=\"初始化blog目录\">初始化blog目录</h1>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> your/blog/dir</div><div class=\"line\">hexo init</div></pre></td></tr></table></figure>\n\n<h1 id=\"在目录中安装所依赖的库\">在目录中安装所依赖的库</h1>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n\n<h1 id=\"修改__config-yml_文件\">修改 <code>_config.yml</code> 文件</h1>\n<p>主要是要修改下面几项</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">title</span>: <span class=\"string\">         # 你的博客名称</span></div><div class=\"line\"><span class=\"attribute\">author</span>: <span class=\"string\">        # 你的名字</span></div><div class=\"line\"><span class=\"attribute\">language</span>: <span class=\"string\">zh_CN # 设置中文</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"http\"><span class=\"attribute\">url</span>: <span class=\"string\">http://deerlux.github.io       # 设置你要发布的地址</span></span></div><div class=\"line\"><span class=\"attribute\">root</span>: <span class=\"string\">/blog                         # 设置你要发布地址的子目录</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"http\"><span class=\"attribute\">theme</span>: <span class=\"string\">pacman                       # 设置要使用的主题，个人推荐pacman，有很多国内适用的特性。</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"http\"><span class=\"attribute\">deploy</span>: <span class=\"string\">                            # 如果你和我一样用github pages发布，请参照</span></span></div><div class=\"line\">  <span class=\"attribute\">type</span>: <span class=\"string\">github</span></div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"string\">https://github.com/deerlux/blog.git</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: <span class=\"string\">gh-pages</span></div><div class=\"line\">  <span class=\"attribute\">message</span>: <span class=\"string\">Updated by hexo          # 这是git提交的消息，你可以改成你需要的。</span></div></pre></td></tr></table></figure>\n\n<p>不过一直没有搞定如何设置github的repo为ssh格式的。</p>\n<h1 id=\"安装并设置pacman主题\">安装并设置pacman主题</h1>\n<p>首先到github上下载此主题。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> your/blog/dir/themes</div><div class=\"line\">git clone git@github.com/A-limon/pacman</div></pre></td></tr></table></figure>\n\n<p>然后进行配置，如果你有新浪微博、多说评论引擎等，可以直接进行配置，改写<br>themes/pacman/_config.yml文件即可。</p>\n","source":"_posts/hexo-blog.md","raw":"title: hexo + github 发布静态博客\ndate: 2014-10-11 23:48:20\ntags: Linux\n---\n\n网上的教程很多，我这里只讲一下干货，也是自己的一个备忘。\n\n# 安装node.js\n\n以archlinux下为例，其他的发行版请自行查找相关的软件包。\n\n``` sh\npacman -S nodejs\n```\n\n# 系统中安装hexo\n\n``` sh\nsudo npm install -g hexo\n```\n\n# 初始化blog目录\n\n``` sh\ncd your/blog/dir\nhexo init\n```\n\n# 在目录中安装所依赖的库\n\n``` sh\nnpm install\n```\n\n# 修改 ``_config.yml`` 文件\n\n主要是要修改下面几项\n\n``` yml\ntitle:          # 你的博客名称\nauthor:         # 你的名字\nlanguage: zh_CN # 设置中文\n\nurl: http://deerlux.github.io       # 设置你要发布的地址\nroot: /blog                         # 设置你要发布地址的子目录\n\ntheme: pacman                       # 设置要使用的主题，个人推荐pacman，有很多国内适用的特性。\n\ndeploy:                             # 如果你和我一样用github pages发布，请参照\n  type: github\n  repo: https://github.com/deerlux/blog.git\n  branch: gh-pages\n  message: Updated by hexo          # 这是git提交的消息，你可以改成你需要的。\n\n```\n\n不过一直没有搞定如何设置github的repo为ssh格式的。\n\n# 安装并设置pacman主题\n\n首先到github上下载此主题。\n\n``` sh\ncd your/blog/dir/themes\ngit clone git@github.com/A-limon/pacman\n```\n\n然后进行配置，如果你有新浪微博、多说评论引擎等，可以直接进行配置，改写\nthemes/pacman/_config.yml文件即可。\n\n\n\n","slug":"hexo-blog","updated":1413297411000,"excerpt":"","_id":"wul2u59sop2jqtpb","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"数据之巅——从美国人历史上如何重视数据讲起大数据的前生今世","date":1413294776000,"tags":[],"content":"<p>作者的文笔非常好，从美国建国时讲起，讲这个年轻的国家如何从一开始就重视数据的应<br>用的。古时候，美国的开国元勋们为了更公平地分配各州在议会中的席位，一直以各州的<br>人口基数为基础，而如果人口更多则这个州也将会承担更多的对于联邦政府的责任，所以<br>没有哪个州会对这种数据人为造假，因为有一种制衡机制。也正是因为如此，人口的多少<br>与这个州的权利和义务干系重大，因此在美国形成了以重视人口普查数据为起点的重视一<br>切数据的观念。每一项决策要想在议会通过，都需要有大量的数据进行支撑权衡投入和产<br>出，以至于不得不对人的生命进行定价，而且有一套较为说服力的定价算法。数据基础建<br>设以及数据共享应用是大数据时代的基础中的基础，美国人很明白这个道理。</p>\n<p>因此，大数据的概念和技术应用最先兴起在美国也就不足为怪了。而反观我国，目前大数<br>据的概念被炒的有点过热了，而且很多人都在跟风炒概念，特别是政府决策层。个人觉得<br>我国离大数据时代还有一定的距离，而且必将在大数据时代落后于美国，因为我们国家的<br>决策机制并非是数据驱动，而是领导意愿驱动的。一个决策的科学与否与领导人的个人能<br>力、战略眼光有强的关联性，这种情况下形不成一种重视数据的风气，因此也就不会出现<br>大数据时代共享共用数据的环境。里面讲的神州数码的一位专家说，我们的差距主要是在<br><strong>观念和文化</strong> ，我深表认同。</p>\n","source":"_posts/数据之巅.md","raw":"title: 数据之巅——从美国人历史上如何重视数据讲起大数据的前生今世\ndate: 2014-10-14 21:52:56\ntags:\n---\n\n作者的文笔非常好，从美国建国时讲起，讲这个年轻的国家如何从一开始就重视数据的应\n用的。古时候，美国的开国元勋们为了更公平地分配各州在议会中的席位，一直以各州的\n人口基数为基础，而如果人口更多则这个州也将会承担更多的对于联邦政府的责任，所以\n没有哪个州会对这种数据人为造假，因为有一种制衡机制。也正是因为如此，人口的多少\n与这个州的权利和义务干系重大，因此在美国形成了以重视人口普查数据为起点的重视一\n切数据的观念。每一项决策要想在议会通过，都需要有大量的数据进行支撑权衡投入和产\n出，以至于不得不对人的生命进行定价，而且有一套较为说服力的定价算法。数据基础建\n设以及数据共享应用是大数据时代的基础中的基础，美国人很明白这个道理。\n\n因此，大数据的概念和技术应用最先兴起在美国也就不足为怪了。而反观我国，目前大数\n据的概念被炒的有点过热了，而且很多人都在跟风炒概念，特别是政府决策层。个人觉得\n我国离大数据时代还有一定的距离，而且必将在大数据时代落后于美国，因为我们国家的\n决策机制并非是数据驱动，而是领导意愿驱动的。一个决策的科学与否与领导人的个人能\n力、战略眼光有强的关联性，这种情况下形不成一种重视数据的风气，因此也就不会出现\n大数据时代共享共用数据的环境。里面讲的神州数码的一位专家说，我们的差距主要是在\n**观念和文化** ，我深表认同。\n\n\n","slug":"数据之巅","updated":1413295722000,"excerpt":"","_id":"h43fvdjukph5j49y","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"sqlalchemy的简单用法","date":1414071827000,"tags":["f4cd6j6djf4jhuyf"],"content":"<h2 id=\"数据库中表结构是现成的情况下ORM\">数据库中表结构是现成的情况下ORM</h2>\n<p>前几天想自己在网上抓些东西然后存放在数据库中以便于后续的数据分析，只是不想自己<br>用DB-API写SQL语句去操作数据，所以才想用ORM的方式，可是看了半天sqlalchemy的文档<br>，都是在讲如何进行建库、建关系等，可是问题是我们经常要操作的数据库，库表的建立<br>并不是通过ORM的方式建，更希望是通过原始的SQL语句去建，对一个现成的数据库进行ORM<br>方式访问有没有更方便的方法呢？这种情况下有没有一种更方便的方式去访问数据库？答<br>案当然是肯定的。</p>\n<p>比如我用来存储用户信息的sqlite数据库 (test.db) 结构是这样的：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"operator\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> users (</span></div><div class=\"line\">    id <span class=\"built_in\">integer</span> <span class=\"keyword\">primary</span> <span class=\"keyword\">key</span>,</div><div class=\"line\">    name <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>),</div><div class=\"line\">    <span class=\"keyword\">password</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n\n<p>sqlalchemy 0.9.1 之后增加了一种automap_base的机制，可以使现成的数据库中的数据结<br>构反射到类上。用来访问上述数据库中的表只需要简单几句就可以完成映射：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding=utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> sqlalchemy</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> Session</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.automap <span class=\"keyword\">import</span> automap_base</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    engine_str = <span class=\"string\">'sqlite:///:test.db'</span></div><div class=\"line\">    engine = sqlalchemy.create_engine(engine_str)</div><div class=\"line\"></div><div class=\"line\">    session = Session(engine)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 下面这两句话就完成了ORM映射 Base.classes.XXXX即为映射的类</span></div><div class=\"line\">    <span class=\"comment\"># Base.metadata.tables['XXX']即为相应的表</span></div><div class=\"line\">    Base = automap_base()</div><div class=\"line\">    Base.prepare(engine, reflect = <span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 查询操作</span></div><div class=\"line\">    result = session.query(Base.classes.users).all()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 插入操作</span></div><div class=\"line\">    item = Base.classes.users(name=<span class=\"string\">'lxq'</span>, password=<span class=\"string\">'1234'</span>)</div><div class=\"line\">    session.add(item)</div><div class=\"line\">    session.commit()</div><div class=\"line\">    </div><div class=\"line\">    session.close()</div></pre></td></tr></table></figure>\n\n<p>简单定义了两个类之后，不用关心数据表的内部实现，sqlalchemy会实现自动的映射，随<br>后手册上的很多操作都可以正常使用了。</p>\n<h2 id=\"数据的修改\">数据的修改</h2>\n<p>ORM系统对数据库中访问到的每一行数据会映射为一个唯一的Table对象，因此，当需要对<br>数据修改的时候，找到这行数据然后直接改其元素然后commit即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ed_user = session.query(User).filter_by(name=<span class=\"string\">'ed'</span>).first()</div><div class=\"line\">ed_user.name = <span class=\"string\">'love'</span></div><div class=\"line\">session.commit()</div></pre></td></tr></table></figure>\n\n<h2 id=\"批量插入\">批量插入</h2>\n<p>利用单纯的ORM方式进行大批量的插入数据，由于是调用多条INSERT语句，因此效率十分低<br>下，session.add_all函数实际上也是调用了多条INSERT语句，如果想批量插入数据，可以<br>进行如下处理：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">engine.execute(User.__table__.insert(), </div><div class=\"line\">    [{<span class=\"string\">'name'</span>:<span class=\"string\">'hello'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'1234'</span>},</div><div class=\"line\">    {<span class=\"string\">'name'</span>:<span class=\"string\">'hello2'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'1234'</span>}])</div></pre></td></tr></table></figure>\n\n<h2 id=\"MISC\">MISC</h2>\n<p>Lazy connecting<br><del>~</del><del>~</del><del>~</del>~</p>\n<p>create_engine 按照手册上的说法是lazy_connecting，当你在create_engine的时候并不<br>会真正的建立数据库连接，而当第一次进行数据库相关操作的时候才会真正建立连接。</p>\n","source":"_posts/sqlalchemy.md","raw":"title: sqlalchemy的简单用法\ndate: 2014-10-23 21:43:47\ntags: Python\n---\n\n数据库中表结构是现成的情况下ORM\n--------------------------------\n\n前几天想自己在网上抓些东西然后存放在数据库中以便于后续的数据分析，只是不想自己\n用DB-API写SQL语句去操作数据，所以才想用ORM的方式，可是看了半天sqlalchemy的文档\n，都是在讲如何进行建库、建关系等，可是问题是我们经常要操作的数据库，库表的建立\n并不是通过ORM的方式建，更希望是通过原始的SQL语句去建，对一个现成的数据库进行ORM\n方式访问有没有更方便的方法呢？这种情况下有没有一种更方便的方式去访问数据库？答\n案当然是肯定的。\n\n比如我用来存储用户信息的sqlite数据库 (test.db) 结构是这样的：\n\n``` sql\ncreate table if not exists users (\n    id integer primary key,\n    name varchar(20),\n    password varchar(20)\n);\n```\n\nsqlalchemy 0.9.1 之后增加了一种automap_base的机制，可以使现成的数据库中的数据结\n构反射到类上。用来访问上述数据库中的表只需要简单几句就可以完成映射：\n\n``` python\n# -*- coding=utf-8 -*-\nimport sqlalchemy\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy.ext.automap import automap_base\n\nif __name__ == \"__main__\":\n    engine_str = 'sqlite:///:test.db'\n    engine = sqlalchemy.create_engine(engine_str)\n\n    session = Session(engine)\n\n    # 下面这两句话就完成了ORM映射 Base.classes.XXXX即为映射的类\n    # Base.metadata.tables['XXX']即为相应的表\n    Base = automap_base()\n    Base.prepare(engine, reflect = True)\n\n    # 查询操作\n    result = session.query(Base.classes.users).all()\n\n    # 插入操作\n    item = Base.classes.users(name='lxq', password='1234')\n    session.add(item)\n    session.commit()\n    \n    session.close()\n```\n\n简单定义了两个类之后，不用关心数据表的内部实现，sqlalchemy会实现自动的映射，随\n后手册上的很多操作都可以正常使用了。\n\n数据的修改\n----------\n\nORM系统对数据库中访问到的每一行数据会映射为一个唯一的Table对象，因此，当需要对\n数据修改的时候，找到这行数据然后直接改其元素然后commit即可。\n\n``` python\ned_user = session.query(User).filter_by(name='ed').first()\ned_user.name = 'love'\nsession.commit()\n```\n\n批量插入\n--------\n\n利用单纯的ORM方式进行大批量的插入数据，由于是调用多条INSERT语句，因此效率十分低\n下，session.add_all函数实际上也是调用了多条INSERT语句，如果想批量插入数据，可以\n进行如下处理：\n\n``` python\nengine.execute(User.__table__.insert(), \n    [{'name':'hello', 'password':'1234'},\n    {'name':'hello2', 'password':'1234'}])\n```\n\nMISC\n-----\n\nLazy connecting\n~~~~~~~~~~~~~~~~\n\ncreate_engine 按照手册上的说法是lazy_connecting，当你在create_engine的时候并不\n会真正的建立数据库连接，而当第一次进行数据库相关操作的时候才会真正建立连接。\n\n\n","slug":"sqlalchemy","updated":1414073043000,"excerpt":"","_id":"5w4yezchyu260oc2","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"国产操作系统与数据库——忍不住的吐槽","date":1414156893000,"tags":["08my9oyremlr52if"],"content":"<p>因工作原因，一些系统要上国产化的操作系统、数据库和中间件，和这些国产化系统软件<br>的技术人员打交道碰到了一些让我无语的事情。</p>\n<h1 id=\"iptables_-F_\">iptables -F </h1>\n<p>我中间想和别的机子传一些文件，一看系统中的ssh服务已经启动起来了，于是在另外一台<br>机器上用ssh登录我的机器，但是明明是能够ping通的 <code>ssh my_ip</code> 却出现了 <code>no\nroute to host MY_IP</code>错误，我一看就怀疑可能是系统的iptables做了什么手脚，但无奈<br>我不会设置iptables。于是叫麒麟操作系统相关的技术人员来，非说我IP地址设置有问题<br>，弄了一通他没有弄明白，可能是技术支持的时候也没有碰到过我这样的用户，非要尝试<br>一下这种东西，最后信我的话了，直接用 <code>iptables -F</code> 给我把防火墙的东西清掉了。</p>\n<p>我瞬间无语，其实我虽然不懂iptables的配置，但这条命令我还是懂得，就是删除所有的<br>iptables规则，那你他么还给我系统装什么iptables啊，国产化系统的安全就是这样保障<br>的啊？再说了，这也没有解决我问题啊，再重启还是不能，只是暂时可以通了。</p>\n<h1 id=\"chomd_-R_777_*\">chomd -R 777 *</h1>\n<p>还有中间件的厂商更是另人蛋疼，号称是通过了公安部XXX认证的中间件厂商，给我的东西<br>是个压缩包，直接解压之后就可以用的，但是呢其中bin目录有些可执行的文件没有设置可<br>执行权限，我猜人家是在 windows 下打的压缩包，要不然怎会出现这种低级问题，不过人<br>家解决的方式也倒是简单，直接到了中间件解压后的根目录，敲了一条另我嘴巴合不拢的<br>命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod -R 777 <span class=\"keyword\">*</span></div></pre></td></tr></table></figure>\n\n<p>看来人家还是习惯在windows下所有用户对所有文件都可读写的传统，这样的做WEB服务的<br>中间件能保证安全？可是我用Linux用点强迫症，ls后看到满屏的绿色，我气就不打一处来<br>。</p>\n<h1 id=\"root用户安装的数据库只能root用\">root用户安装的数据库只能root用</h1>\n<p>数据库产品也是，技术人员演示的是用root用户登录X系统，然后安装，然后运行数据库的<br>管理台。我是用普通用户登录，sudo安装，然后用普通用户打开控制台，不行。用sudo在<br>命令行里打开控制台可以。但是用普通用户打开控制台就报一个权限的错误，技术人员来<br>后坚持说root用户安装的就只能root用户用，如果想用普通用户用的话就用普通用户安装<br>。后来来了一个比他更懂行一些的，说可以将安装目录所有文件的属主改成我的登录用户<br>。我无语。后来我找到了问题的根源了，每个用户打开控制台的时候都会往安装目录下的<br>一个.manager目录里写log，如果普通用户没有对这个目录的写权限则就会报错。数据库系<br>统安装的时候将安装目录的权限都设置成了组可写的，因此比较恰当的做法是将允许使用<br>数据库的用户的组添加一个这个数据库目录的组即可。</p>\n<p>由此我算得出了两个结论：</p>\n<ul>\n<li>技术支持人员素质太差，基础的Linux安全以及相关的内容知识匮乏。软件设计得不符合</li>\n<li>Linux的规范，普通用户的log文件按照惯例应该是写在$HOME/.XXX目录下的，为什么要<br>往安装目录下写呢，典型的单用户windows系统的习惯。</li>\n</ul>\n<p>我们任重道远啊。</p>\n","source":"_posts/guochan-os.md","raw":"title: 国产操作系统与数据库——忍不住的吐槽\ndate: 2014-10-24 21:21:33 \ntags: Linux\n---\n\n因工作原因，一些系统要上国产化的操作系统、数据库和中间件，和这些国产化系统软件\n的技术人员打交道碰到了一些让我无语的事情。\n\niptables -F \n============\n\n我中间想和别的机子传一些文件，一看系统中的ssh服务已经启动起来了，于是在另外一台\n机器上用ssh登录我的机器，但是明明是能够ping通的 ``ssh my_ip`` 却出现了 ``no\nroute to host MY_IP``错误，我一看就怀疑可能是系统的iptables做了什么手脚，但无奈\n我不会设置iptables。于是叫麒麟操作系统相关的技术人员来，非说我IP地址设置有问题\n，弄了一通他没有弄明白，可能是技术支持的时候也没有碰到过我这样的用户，非要尝试\n一下这种东西，最后信我的话了，直接用 ``iptables -F`` 给我把防火墙的东西清掉了。\n\n我瞬间无语，其实我虽然不懂iptables的配置，但这条命令我还是懂得，就是删除所有的\niptables规则，那你他么还给我系统装什么iptables啊，国产化系统的安全就是这样保障\n的啊？再说了，这也没有解决我问题啊，再重启还是不能，只是暂时可以通了。\n\nchomd -R 777 *\n==================\n\n还有中间件的厂商更是另人蛋疼，号称是通过了公安部XXX认证的中间件厂商，给我的东西\n是个压缩包，直接解压之后就可以用的，但是呢其中bin目录有些可执行的文件没有设置可\n执行权限，我猜人家是在 windows 下打的压缩包，要不然怎会出现这种低级问题，不过人\n家解决的方式也倒是简单，直接到了中间件解压后的根目录，敲了一条另我嘴巴合不拢的\n命令:\n\n``` shell \nchmod -R 777 * \n```\n\n看来人家还是习惯在windows下所有用户对所有文件都可读写的传统，这样的做WEB服务的\n中间件能保证安全？可是我用Linux用点强迫症，ls后看到满屏的绿色，我气就不打一处来\n。\n\nroot用户安装的数据库只能root用\n==============================\n\n数据库产品也是，技术人员演示的是用root用户登录X系统，然后安装，然后运行数据库的\n管理台。我是用普通用户登录，sudo安装，然后用普通用户打开控制台，不行。用sudo在\n命令行里打开控制台可以。但是用普通用户打开控制台就报一个权限的错误，技术人员来\n后坚持说root用户安装的就只能root用户用，如果想用普通用户用的话就用普通用户安装\n。后来来了一个比他更懂行一些的，说可以将安装目录所有文件的属主改成我的登录用户\n。我无语。后来我找到了问题的根源了，每个用户打开控制台的时候都会往安装目录下的\n一个.manager目录里写log，如果普通用户没有对这个目录的写权限则就会报错。数据库系\n统安装的时候将安装目录的权限都设置成了组可写的，因此比较恰当的做法是将允许使用\n数据库的用户的组添加一个这个数据库目录的组即可。\n\n由此我算得出了两个结论：\n\n* 技术支持人员素质太差，基础的Linux安全以及相关的内容知识匮乏。软件设计得不符合\n* Linux的规范，普通用户的log文件按照惯例应该是写在$HOME/.XXX目录下的，为什么要\n  往安装目录下写呢，典型的单用户windows系统的习惯。\n\n我们任重道远啊。\n\n\n\n","slug":"guochan-os","updated":1414159990000,"excerpt":"","_id":"im9h5eo4uzlymfpy","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"好妈妈胜过好老师——现代儿童教育启示录","date":1416062874000,"tags":["vwdusz13gct06oiu"],"content":"<h1 id=\"一句话的概括\">一句话的概括</h1>\n<p>讲的是一种以孩子为核心的家庭教育方式，让人读后能够明白，在对待孩子的所有问题方面，是否充分考虑了孩子的需求和感受，而并非一味的从一个成年人的角度考虑问题。以孩子的兴趣为出发点引导孩子向好的方向发展，才是儿童教育的正道。这本书对每位父母而言都是必读的经典。</p>\n<h1 id=\"感言\">感言</h1>\n<p>老婆推荐我看的一本书《好妈妈胜过好老师——一个教育专家16年的教子手记》，作者尹建莉，作家出版社2009年1月出版。和一个同事一起出差，她推荐我看一本投资方面的书，我却看不下去，拿出这本《好妈妈胜过好老师》来看，回家后给老婆一说起此事，老婆也觉得有些好笑，但看完这本书后确实受益匪浅。</p>\n<p>其实每个人都希望自己的孩子能够成才，甚至大部分都希望至少要比自己这一辈能够更加出息。因此，希望孩子能够懂礼貌、有教养、多才多艺、学习成绩要名列前矛，这应该是每一个作父母的所期盼的。但是随着生活条件的逐步提高，在子女教育上的物质投入也越来越高，但现代社会上存在的问题儿童却越来越多。</p>\n<p>儿童的教育，父母是第一位的，父母可能会很有钱，给孩子上名牌的小学、中学，但是如果家庭的教育或者说父母的教育方式不当，最终还是难以取得较好的效果。</p>\n<h1 id=\"家庭教育是否一切以孩子为核心\">家庭教育是否一切以孩子为核心</h1>\n<p>书中讲的几个观点印象特别深，其中最核心的是，在教育孩子的过程中，你是不是以孩子为核心，能否充分考虑孩子的感受。书中举了很多这样的例子，比如她女儿的同学告诉女儿说家里有两柄剑，但这是个秘密，如果你告诉了别人，你的肚子会被刺穿，女儿信以为真，为此事非常烦恼，后来终于鼓足勇气将此事告诉了妈妈。这时候的妈妈并没有像一般人似的嘲笑孩子，而是耐心地给孩子讲道理，充分考虑到了孩子为了保守这个秘密自己承受了多大的痛苦，虽然这些痛苦在大人们看来挺可笑的，但对于孩子而言这却非常重要，如果你去嘲笑孩子以为非常重要的事情，对孩子形成的负面影响将会很大。再有作者比较后悔的一次，带着女儿和另外一个亲戚的小孩去爬山，两个小孩子在非要在地上爬着走，大人硬是把孩子提起来了，后来孩子抱怨说，大人们根本就没有了解孩子，因为他们觉得既然是爬山，为什么不是爬着走，孩子的童趣就在这里，而大人则要考虑孩子的衣服这些锁事，扼杀了孩子的乐趣。</p>\n<p>有些孩子调皮，有些孩子表现出来的是听话，但调皮和听话仅仅是表面现象，核心的是是否真正地理解了孩子的所做所为，每一个孩子其实都是挺上进的，他们不喜欢当差生，也并不喜欢总被家长和老师骂，但是每一次父母以为孩子的错误是否从孩子的角度切实地考虑和分析了呢，或者是单纯地以大人的观点去作判断。</p>\n<h1 id=\"每一个孩子都是天使\">每一个孩子都是天使</h1>\n<p>每一个孩子都是天使，理应生活在童话的世界里，他们的乐趣其实很简单，但是很多大人却不能站在孩子的角度理解他们。作者夫妇会注意孩子的需求，然后每年圣诞节会有圣诞老人给孩子送礼物，孩子觉得很神奇，甚至在学校里还和老师争辩圣诞老人的有无问题。是啊，童年很是短暂，孩子是天使，理应生活在童话的世界里，等逐渐长大后，便又成了凡人。</p>\n<h1 id=\"阅读的习惯对孩子的基础素质无比重要\">阅读的习惯对孩子的基础素质无比重要</h1>\n<p>要尽早培养孩子阅读的习惯，如果孩子能够对阅读感兴趣，会带来很多额外的好处，一是他们可以大大的开拓视野和知识面，二是他们可以为后续的表达能力、写作能力打下很好的基础，三是可以不会沉沦于看电视和玩游戏。其实我自小没有养成很好的阅读习惯，致使现在读的书也偏少。记得一次上中学的时候，自己在家偷偷拿一本武侠小说看，被父亲看到了，狠狠地批评了我一通，后来再也不敢在家里看武侠小说了。高中的时候，仅记得看过一本评书类似的《薜丁山征西》，如果在我中小学时有条件的话，能够多看一些文学水平较高的小说，可能会对我的一生都会有较重要的影响。我无意责备自己的父母，但是在自己教育孩子的过程中却真要避免犯类似的错误。</p>\n","source":"_posts/haomama.md","raw":"title: 好妈妈胜过好老师——现代儿童教育启示录 \ndate: 2014-11-15 22:47:54\ntags: Misc\n---\n\n一句话的概括\n============\n\n讲的是一种以孩子为核心的家庭教育方式，让人读后能够明白，在对待孩子的所有问题方面，是否充分考虑了孩子的需求和感受，而并非一味的从一个成年人的角度考虑问题。以孩子的兴趣为出发点引导孩子向好的方向发展，才是儿童教育的正道。这本书对每位父母而言都是必读的经典。\n\n感言\n====\n\n老婆推荐我看的一本书《好妈妈胜过好老师——一个教育专家16年的教子手记》，作者尹建莉，作家出版社2009年1月出版。和一个同事一起出差，她推荐我看一本投资方面的书，我却看不下去，拿出这本《好妈妈胜过好老师》来看，回家后给老婆一说起此事，老婆也觉得有些好笑，但看完这本书后确实受益匪浅。\n\n\n其实每个人都希望自己的孩子能够成才，甚至大部分都希望至少要比自己这一辈能够更加出息。因此，希望孩子能够懂礼貌、有教养、多才多艺、学习成绩要名列前矛，这应该是每一个作父母的所期盼的。但是随着生活条件的逐步提高，在子女教育上的物质投入也越来越高，但现代社会上存在的问题儿童却越来越多。\n\n儿童的教育，父母是第一位的，父母可能会很有钱，给孩子上名牌的小学、中学，但是如果家庭的教育或者说父母的教育方式不当，最终还是难以取得较好的效果。\n\n家庭教育是否一切以孩子为核心\n============================\n\n书中讲的几个观点印象特别深，其中最核心的是，在教育孩子的过程中，你是不是以孩子为核心，能否充分考虑孩子的感受。书中举了很多这样的例子，比如她女儿的同学告诉女儿说家里有两柄剑，但这是个秘密，如果你告诉了别人，你的肚子会被刺穿，女儿信以为真，为此事非常烦恼，后来终于鼓足勇气将此事告诉了妈妈。这时候的妈妈并没有像一般人似的嘲笑孩子，而是耐心地给孩子讲道理，充分考虑到了孩子为了保守这个秘密自己承受了多大的痛苦，虽然这些痛苦在大人们看来挺可笑的，但对于孩子而言这却非常重要，如果你去嘲笑孩子以为非常重要的事情，对孩子形成的负面影响将会很大。再有作者比较后悔的一次，带着女儿和另外一个亲戚的小孩去爬山，两个小孩子在非要在地上爬着走，大人硬是把孩子提起来了，后来孩子抱怨说，大人们根本就没有了解孩子，因为他们觉得既然是爬山，为什么不是爬着走，孩子的童趣就在这里，而大人则要考虑孩子的衣服这些锁事，扼杀了孩子的乐趣。\n\n有些孩子调皮，有些孩子表现出来的是听话，但调皮和听话仅仅是表面现象，核心的是是否真正地理解了孩子的所做所为，每一个孩子其实都是挺上进的，他们不喜欢当差生，也并不喜欢总被家长和老师骂，但是每一次父母以为孩子的错误是否从孩子的角度切实地考虑和分析了呢，或者是单纯地以大人的观点去作判断。\n\n每一个孩子都是天使\n==================\n\n每一个孩子都是天使，理应生活在童话的世界里，他们的乐趣其实很简单，但是很多大人却不能站在孩子的角度理解他们。作者夫妇会注意孩子的需求，然后每年圣诞节会有圣诞老人给孩子送礼物，孩子觉得很神奇，甚至在学校里还和老师争辩圣诞老人的有无问题。是啊，童年很是短暂，孩子是天使，理应生活在童话的世界里，等逐渐长大后，便又成了凡人。\n\n阅读的习惯对孩子的基础素质无比重要\n==================================\n\n要尽早培养孩子阅读的习惯，如果孩子能够对阅读感兴趣，会带来很多额外的好处，一是他们可以大大的开拓视野和知识面，二是他们可以为后续的表达能力、写作能力打下很好的基础，三是可以不会沉沦于看电视和玩游戏。其实我自小没有养成很好的阅读习惯，致使现在读的书也偏少。记得一次上中学的时候，自己在家偷偷拿一本武侠小说看，被父亲看到了，狠狠地批评了我一通，后来再也不敢在家里看武侠小说了。高中的时候，仅记得看过一本评书类似的《薜丁山征西》，如果在我中小学时有条件的话，能够多看一些文学水平较高的小说，可能会对我的一生都会有较重要的影响。我无意责备自己的父母，但是在自己教育孩子的过程中却真要避免犯类似的错误。\n\n\n\n","slug":"haomama","updated":1416065030000,"excerpt":"","_id":"qxjc3qb8la34mx76","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"理解Docker","date":1414764999000,"tags":["ppd5srm1dc91ylbi"],"content":"<p>原文出自<a href=\"https://docs.docker.com/introduction/understanding-docker/，\" target=\"_blank\" rel=\"external\">https://docs.docker.com/introduction/understanding-docker/，</a> 本文由<a href=\"&#109;&#97;&#x69;&#108;&#x74;&#111;&#58;&#x64;&#x65;&#x65;&#x72;&#x6c;&#117;&#120;&#64;&#x31;&#x36;&#51;&#46;&#99;&#x6f;&#109;\">&#x64;&#x65;&#x65;&#x72;&#x6c;&#117;&#120;&#64;&#x31;&#x36;&#51;&#46;&#99;&#x6f;&#109;</a>翻译。</p>\n<h1 id=\"什么是Docker？\">什么是Docker？</h1>\n<p>Docker是一个用于开发、装载和运行程度的开放平台，可使你的程序迁移更加便捷。在Docker中可以将你的应用程序和基础设施层隔离，并且还可以将你的基础设施当作程序一样进行管理。Docker可以帮助你更加快速地打包你代码、更加快速地测试、更加快速地部署，并且可以减少写代码到部署运行代码的周期。</p>\n<p>Docker通过将一个轻量级的容器虚拟化平台和一组标准工作流程、工具进行集成，来帮助你方便地管理和部署应用。</p>\n<p>核心的是，Docker提供了一种在一个安全隔离的环境中运行几乎所有程序方式，这种隔离性和安全性允许你在同一主机上同时运行多个容器，而容器的这种轻量级特性，意味着你可以节省更多的硬件资源，因为你不必消耗运行hypervisor所需要的额外负载的。</p>\n<p>围绕容器虚拟化Docker提供了一些工具和一个平台，可为你提供以下帮助：</p>\n<ul>\n<li>将应用程序（包括支撑的组件）放入docker容器中；</li>\n<li>将这些容器打包并分发给你的团队，以便于后续的开发和测试；</li>\n<li>将这些容器部署到生产环境中，即可以是本地的数据中心也可以在云端。</li>\n</ul>\n<h1 id=\"我可以用Docker做些什么？\">我可以用Docker做些什么？</h1>\n<h2 id=\"快速分发你的应用\">快速分发你的应用</h2>\n<p>Docker是开发过程中较为理想的助手，它允许你在包含了你的应用和服务的本地容器中进行开发，然后帮你完成集成和部署。</p>\n<p>例如，你的开发人员可以在本地写代码然后通过Docker与其他同事共享，当他们完成了各自的开发任务后，可以将他们的代码推送到一个测试的环境中进行测试，完成测试后便可以将相应的Docker镜像部署到生产环境中。</p>\n<h2 id=\"更方便地进行部署和调整规模\">更方便地进行部署和调整规模</h2>\n<p>Docker这种基于容器的平台具有高度的便携性，它可以无缝地运行于开发者的本地主机、数据中心其他的物理机或虚拟机、或者云端。</p>\n<p>Docker的便携性和其天然的轻量特性易于实现动态地负载管理，你可以利用Docker快速地增减应用和服务的部署规模，Docker的速度保证了这种规模的调整近乎实时。</p>\n<h2 id=\"更高密度的部署应用和运行更多的应用\">更高密度的部署应用和运行更多的应用</h2>\n<p>由于Docker轻量并且快速，因此相对于基于Hypervisor的虚拟机的部署方式，Docker提供了一种更可行和划算的替代方案，这对于高密度部署环境尤其有用，例如在构建私有云或平台即服务环境时，当然，当你想在有限的资源里部署更多的应用时，Docker对于小中型的部署也非常有用。</p>\n<h1 id=\"Docker主要包括哪些组件？\">Docker主要包括哪些组件？</h1>\n<p>Docker主要包括两个组件：</p>\n<ul>\n<li>Docker: 开源的容器虚拟化平台；</li>\n<li><a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"external\">Docker Hub</a> ：用于分享和管理Docker容器的软件即服务平台。</li>\n</ul>\n<p><strong>注</strong>: Docker在Apache 2.0开源协议下进行授权。</p>\n<h1 id=\"Docker的架构？\">Docker的架构？</h1>\n<p>Docker是一种Client/Server的架构，Docker客户端与Docker daemon进行交互，daemon负责构建、运行和发布Docker容器。客户端即可以和服务端运行在同一个系统中，也可以连接远程的daemon。Docker的客户端的daemon通过RESTful API进行sockets 通信。</p>\n<p><img src=\"https://docs.docker.com/article-img/architecture.svg\" alt=\"docker-architecture.svg\"></p>\n<h2 id=\"Docker守护进程\">Docker守护进程</h2>\n<p>就像上图所示，Docker守护进程(daemon)在主机上运行，用户不能直接和守护进程打交道，但是可以通过docker客户端与其进行交互。</p>\n<h2 id=\"Docker客户端\">Docker客户端</h2>\n<p>Docker客户端——<code>docker</code>二进制文件的功能之一——是Docker的初始用户界面，它接收用户的命令并反馈，并且与Docker的守护进行交互。</p>\n<h2 id=\"Docker内部机制\">Docker内部机制</h2>\n<p>理解Docker的内部机制，你需要明白如下三个组件：</p>\n<ul>\n<li>Docker镜像</li>\n<li>Docker注册中心</li>\n<li>Docker容器</li>\n</ul>\n<h3 id=\"Docker镜像\">Docker镜像</h3>\n<p>Docker镜像是一个只读的模块。例如，一个镜像可以包含一个安装了apache WEB服务应用的Ubuntu操作系统。镜像用来创建Docker容器。Docker提供了构建新镜像或升级原有镜像的较为便利的方式，或者你也可以下载别人已经创建好的镜像。Docker镜像是Docker的<strong>构建</strong>组件。</p>\n<h3 id=\"Docker注册中心\">Docker注册中心</h3>\n<p>Docker注册中心用于上传和下载镜像，有公共注册中心和私有注册中心两种。公共注册中心为<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"external\">Docker Hub</a>，它提供了大量的现成镜像，你可以构建自己的镜像上传到上面，也可以在上面下载别人构建的镜像。Docker注册中心是Docker的<strong>发布</strong>组件。</p>\n<h3 id=\"Docker容器\">Docker容器</h3>\n<p>Docker容器与一个目录很类似，它包含了一个应用程序运行所需要的一切内容。每个容器都是基于一个Docker镜像制作的。Docker容器可被运行、开始、停止、迁移或者是删除。每个容器均是一个隔离的、安全的应用平台。Docker容器是Docker的<strong>运行</strong>组件。</p>\n<h2 id=\"Docker怎样工作的\">Docker怎样工作的</h2>\n<p>至此，我们已经知道了：</p>\n<ol>\n<li>你可以构建用于存储你的应用程序的镜像；</li>\n<li>你可以从Docker镜像中创建容器用来运行你的应用；</li>\n<li>你可以通过<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"external\">Docker Hub</a>或者你自己的注册中心来共享Docker镜像</li>\n</ol>\n<p>那我们看看Docker是怎么将这些元素组合在一起工作的。</p>\n<h3 id=\"Docker镜像是如何工作的\">Docker镜像是如何工作的</h3>\n<p>我们已经知道Docker镜像实质上是一些用于加载Docker容器的只读模板，每个镜像包括很多层。Docker利用<a href=\"http://en.wikipedia.org/wiki/UnionFS\" target=\"_blank\" rel=\"external\">union file systems</a>将这些层组合为一个镜像。Union file systems允许相互隔离的文件或目录透明的叠加在一起，而呈现为一个统一的文件系统。</p>\n<p>Docker如此轻量化的原因也是由于这些层的存在。当你对一个Docker镜像进行修改时——例如将一个应用升级为一个新的版本——会构建一个新的层，因此，与虚拟机的替换整个镜像或完全构建的方式不同，Docker仅对相关的层进行添加或升级。所以你仅需要发布镜像的更新部分而不必发布整个镜像，这种方式使得镜像的发布更加快速和简单。</p>\n<p>每个镜像始于一个基础镜像，例如：<code>ubuntu</code>便是一个基础的Ubuntu镜像，<code>fedora</code>是一个基础的Fedora镜像。你也可以将你自己制作的镜像作为基础镜像，例如你可以将一个Apache镜像作为一个Web应用的基础镜像。</p>\n<blockquote>\n<p>注意：Docker一般从<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"external\">Docker Hub</a>上获取基础镜像。</p>\n</blockquote>\n<p>Docker镜像从这些基础镜像中按照一系列的步骤进行制作，我们称这些步骤为<strong>指令</strong>，每个指令在你的镜像中创建一个新的层，指令包括以下行为：</p>\n<ul>\n<li>运行一条命令；</li>\n<li>添加一个文件或目录；</li>\n<li>创建一个环境变量；</li>\n<li>从此镜像中加载一个容器时需要运行的进程。</li>\n</ul>\n<p>这些指令存储在<code>Dockerfile</code>中，Docker在构建镜像过程中读取这个<code>Dockerfile</code>，运行里面的指令并返回最终的镜像。</p>\n<h3 id=\"Docker注册中心如何工作的\">Docker注册中心如何工作的</h3>\n<p>Docker注册中心是Docker镜像的存储中心，当你构建完一个镜像后便可以将其推送到<a href=\"https://hub.docker.com\" target=\"_blank\" rel=\"external\">Docker Hub</a>或你自己的注册中心。</p>\n<p>利用Docker客户端，你可以搜索已经发布的镜像，然后将其拉取到你的Docker主机上，以便于从这些镜像中构建容器。</p>\n<p><a href=\"https://hub.docker.com\" target=\"_blank\" rel=\"external\">Docker Hub</a>为镜像提供了公共的和私有的存储空间。公共的存储空间任何人均可以在上面搜索和下载，私有存储空间仅对你本人或你的团队开放搜索以及拉取下载，你可以通过<a href=\"https://hub.docker.com/plans\" target=\"_blank\" rel=\"external\">这里</a>注册一个私有的存储空间。</p>\n<h3 id=\"容器是如何工作的\">容器是如何工作的</h3>\n<p>一个容器包括操作系统、用户添加的文件以及相关的元数据。我们知道，每个容器都是从镜像中构建出来的，这个镜像告诉Docker容器用到什么资源、当容器加载时启动哪个进程以及容器启动时的其他配置。Docker镜像是只读的，当Docker从一个镜像运行一个容器时，它会在镜像的上层添加一个用于运行应用的可读写的层（利用的就是上文提到的union file system）。</p>\n<h3 id=\"运行一个容器时到底发生了什么\">运行一个容器时到底发生了什么</h3>\n<p>Docker客户端通过直接运行<code>docker</code>或者通过API调用的方式，可以通知Docker的守护进程运行一个容器。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">sudo</span> docker run -i -t ubuntu /bin/bash</div></pre></td></tr></table></figure>\n\n<p>我们来看一下这个命令，Docker客户端利用<code>docker</code>命令跟一个<code>run</code>的选项启动一个容器，一个最小配置的Docker客户端运行一个容器需要告诉Docker守护进程以下事项：</p>\n<ul>\n<li>此容器基于什么镜像来构建，此处是<code>ubuntu</code>——一个基础的Ubuntu镜像；</li>\n<li>需要在容器中运行的命令，此处是<code>/bin/bash</code>——在容器中启动一个Bash Shell。</li>\n</ul>\n<p>那么我们看看运行上述命令时到底发生了什么？</p>\n<p>按照顺序，Docker依次干了如下事情：</p>\n<ul>\n<li><strong>拉取<code>ubuntu</code>镜像</strong> : Docker首先检查一下<code>ubuntu</code>镜像在本地服务器上存不存在，如果不存在，则自动从<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"external\">Docker Hub</a>中下载，如果已经存在则直接利用这个镜像来启动一个新的容器。</li>\n<li><strong>创建一个新的容器</strong>: 如果Docker本地服务器中存在这个镜像，那么就据此来启动一个容器。</li>\n<li><strong>分配一个文件每户并且将其挂载到一个可读写的层</strong>: 容器在此文件系统中被创建，并且将其作为一个可读写的层添加到镜像中。</li>\n<li><strong>分配一个网络或桥接的接口</strong>: 创建一个网络的接口以便于Docker容器能够访问本机。</li>\n<li><strong>设置一个IP地址</strong>: 为此容器从地址池中找到并绑定一个IP地址。</li>\n<li><strong>执行指定的进程</strong>: 运行你的应用程序，然后；</li>\n<li><strong>获取并提供应用程序的输出</strong>: 连接标准输入、标准输出和标准错误接口，这样你便可以观察到程序运行的一切。</li>\n</ul>\n<p>现在你已经运行了一个容器，这样你便可以管理你的容器、与应用程序进行交互，当运行结束是停止或者删除你的容器。</p>\n<h2 id=\"底层技术问题\">底层技术问题</h2>\n<p>Docker是用Go语言实现的，用到了一些Linux内核的特性实现上述功能。</p>\n<h3 id=\"命名空间（namespaces）\">命名空间（namespaces）</h3>\n<p>Docker在为容器提供一个隔离的工作空间时，用到了<code>命名空间</code>的技术，当你运行一个容器时，Docker会为此容器创建一组命名空间。</p>\n<p>这样便可以提供一个隔离的层：每个容器运行在自己的命名空间中，而外部不能访问这个层。</p>\n<p>Docker用到的一些命名空间有：</p>\n<ul>\n<li><strong><code>pid</code>命名空间</strong>: 用于隔离进程（PID：Process ID）；</li>\n<li><strong><code>net</code>命名空间</strong>: 用于管理网络；</li>\n<li><strong><code>ipc</code>命名空间</strong>: 用于访问IPC资源（IPC：InterProcess Communication）；</li>\n<li><strong><code>mnt</code>命名空间</strong>: 用于管理挂载点（MNT：Mount）；</li>\n<li><strong><code>uts</code>命名空间</strong>: 用于隔离内核和版本标识（UTS：Unix Timesharing System）。</li>\n</ul>\n<h3 id=\"控制组（Control_Groups）\">控制组（Control Groups）</h3>\n<p>Docker还用到了另外一项技术叫<code>cgroups</code>或者叫控制组（control groups）。实现程序运行环境的隔离的关键在于使这些程序只用到他们需要的资源，这就能够保证这些容器是主机服务环境小社会中的好市民。控制组允许Docker在不同的容器之间共享硬件资源，需要时添加一些限制和约束，例如限制一个容器最大访问内存量。</p>\n<h3 id=\"统一文件系统（Union_file_systems）\">统一文件系统（Union file systems）</h3>\n<p>统一文件系统或者说是UnionFS，是创建层的时候用到的文件系统，使文件系统非常轻量和快速。Docker使用统一文件系统为容器构建blocks，Docker可以使用几种不同的文件系统：AUFS、btrfs、vfs以及DeviceMapper。</p>\n<h3 id=\"容器格式\">容器格式</h3>\n<p>Docker容器将这些组件合并在一起，我们称之为容器格式，容器的缺省格式称为<code>libcontainer</code>。Docker还支持利用<a href=\"https://linuxcontainers.org/\" target=\"_blank\" rel=\"external\">LXC</a>技术的传统Linux容器格式，未来还将会支持其他的容器格式，例如：与BSD Jails或者Solaris Zones实现整合。</p>\n<h2 id=\"下一步\">下一步</h2>\n<p>安装Docker，请参照<a href=\"https://docs.docker.com/installation/#installation\" target=\"_blank\" rel=\"external\">installation section</a></p>\n<p>Docker用户指南，请参照<a href=\"https://docs.docker.com/userguide/\" target=\"_blank\" rel=\"external\">深入学习Docker</a></p>\n","source":"_posts/understanding-docker.md","raw":"title: 理解Docker \ndate: 2014-10-31 22:16:39\ntags: 虚拟化\n---\n\n原文出自https://docs.docker.com/introduction/understanding-docker/， 本文由<deerlux@163.com>翻译。\n\n什么是Docker？\n=============\n\nDocker是一个用于开发、装载和运行程度的开放平台，可使你的程序迁移更加便捷。在Docker中可以将你的应用程序和基础设施层隔离，并且还可以将你的基础设施当作程序一样进行管理。Docker可以帮助你更加快速地打包你代码、更加快速地测试、更加快速地部署，并且可以减少写代码到部署运行代码的周期。\n\nDocker通过将一个轻量级的容器虚拟化平台和一组标准工作流程、工具进行集成，来帮助你方便地管理和部署应用。\n\n核心的是，Docker提供了一种在一个安全隔离的环境中运行几乎所有程序方式，这种隔离性和安全性允许你在同一主机上同时运行多个容器，而容器的这种轻量级特性，意味着你可以节省更多的硬件资源，因为你不必消耗运行hypervisor所需要的额外负载的。\n\n围绕容器虚拟化Docker提供了一些工具和一个平台，可为你提供以下帮助：\n\n* 将应用程序（包括支撑的组件）放入docker容器中；\n* 将这些容器打包并分发给你的团队，以便于后续的开发和测试；\n* 将这些容器部署到生产环境中，即可以是本地的数据中心也可以在云端。\n\n我可以用Docker做些什么？\n======================\n\n快速分发你的应用\n----------------\n\nDocker是开发过程中较为理想的助手，它允许你在包含了你的应用和服务的本地容器中进行开发，然后帮你完成集成和部署。\n\n例如，你的开发人员可以在本地写代码然后通过Docker与其他同事共享，当他们完成了各自的开发任务后，可以将他们的代码推送到一个测试的环境中进行测试，完成测试后便可以将相应的Docker镜像部署到生产环境中。\n\n更方便地进行部署和调整规模\n----------------------\n\nDocker这种基于容器的平台具有高度的便携性，它可以无缝地运行于开发者的本地主机、数据中心其他的物理机或虚拟机、或者云端。\n\nDocker的便携性和其天然的轻量特性易于实现动态地负载管理，你可以利用Docker快速地增减应用和服务的部署规模，Docker的速度保证了这种规模的调整近乎实时。\n\n更高密度的部署应用和运行更多的应用\n----------------------------------\n\n由于Docker轻量并且快速，因此相对于基于Hypervisor的虚拟机的部署方式，Docker提供了一种更可行和划算的替代方案，这对于高密度部署环境尤其有用，例如在构建私有云或平台即服务环境时，当然，当你想在有限的资源里部署更多的应用时，Docker对于小中型的部署也非常有用。\n\nDocker主要包括哪些组件？\n======================\n\nDocker主要包括两个组件：\n\n* Docker: 开源的容器虚拟化平台；\n* [Docker Hub](https://hub.docker.com/) ：用于分享和管理Docker容器的软件即服务平台。\n\n**注**: Docker在Apache 2.0开源协议下进行授权。\n\nDocker的架构？\n==============\n\nDocker是一种Client/Server的架构，Docker客户端与Docker daemon进行交互，daemon负责构建、运行和发布Docker容器。客户端即可以和服务端运行在同一个系统中，也可以连接远程的daemon。Docker的客户端的daemon通过RESTful API进行sockets 通信。\n\n![docker-architecture.svg](https://docs.docker.com/article-img/architecture.svg)\n\nDocker守护进程\n--------------\n\n就像上图所示，Docker守护进程(daemon)在主机上运行，用户不能直接和守护进程打交道，但是可以通过docker客户端与其进行交互。\n\nDocker客户端\n------------\n\nDocker客户端——`docker`二进制文件的功能之一——是Docker的初始用户界面，它接收用户的命令并反馈，并且与Docker的守护进行交互。\n\nDocker内部机制\n--------------\n\n理解Docker的内部机制，你需要明白如下三个组件：\n\n* Docker镜像\n* Docker注册中心\n* Docker容器\n\n### Docker镜像\n\n\nDocker镜像是一个只读的模块。例如，一个镜像可以包含一个安装了apache WEB服务应用的Ubuntu操作系统。镜像用来创建Docker容器。Docker提供了构建新镜像或升级原有镜像的较为便利的方式，或者你也可以下载别人已经创建好的镜像。Docker镜像是Docker的**构建**组件。\n\n### Docker注册中心\n\nDocker注册中心用于上传和下载镜像，有公共注册中心和私有注册中心两种。公共注册中心为[Docker Hub](https://hub.docker.com/)，它提供了大量的现成镜像，你可以构建自己的镜像上传到上面，也可以在上面下载别人构建的镜像。Docker注册中心是Docker的**发布**组件。\n\n### Docker容器\n\nDocker容器与一个目录很类似，它包含了一个应用程序运行所需要的一切内容。每个容器都是基于一个Docker镜像制作的。Docker容器可被运行、开始、停止、迁移或者是删除。每个容器均是一个隔离的、安全的应用平台。Docker容器是Docker的**运行**组件。\n\nDocker怎样工作的\n-----------------\n\n至此，我们已经知道了：\n\n1. 你可以构建用于存储你的应用程序的镜像；\n1. 你可以从Docker镜像中创建容器用来运行你的应用；\n1. 你可以通过[Docker Hub](https://hub.docker.com/)或者你自己的注册中心来共享Docker镜像\n\n\n那我们看看Docker是怎么将这些元素组合在一起工作的。\n\n### Docker镜像是如何工作的\n\n我们已经知道Docker镜像实质上是一些用于加载Docker容器的只读模板，每个镜像包括很多层。Docker利用[union file systems](http://en.wikipedia.org/wiki/UnionFS)将这些层组合为一个镜像。Union file systems允许相互隔离的文件或目录透明的叠加在一起，而呈现为一个统一的文件系统。\n\nDocker如此轻量化的原因也是由于这些层的存在。当你对一个Docker镜像进行修改时——例如将一个应用升级为一个新的版本——会构建一个新的层，因此，与虚拟机的替换整个镜像或完全构建的方式不同，Docker仅对相关的层进行添加或升级。所以你仅需要发布镜像的更新部分而不必发布整个镜像，这种方式使得镜像的发布更加快速和简单。\n\n每个镜像始于一个基础镜像，例如：`ubuntu`便是一个基础的Ubuntu镜像，`fedora`是一个基础的Fedora镜像。你也可以将你自己制作的镜像作为基础镜像，例如你可以将一个Apache镜像作为一个Web应用的基础镜像。\n\n> 注意：Docker一般从[Docker Hub](https://hub.docker.com/)上获取基础镜像。\n\nDocker镜像从这些基础镜像中按照一系列的步骤进行制作，我们称这些步骤为**指令**，每个指令在你的镜像中创建一个新的层，指令包括以下行为：\n\n* 运行一条命令；\n* 添加一个文件或目录；\n* 创建一个环境变量；\n* 从此镜像中加载一个容器时需要运行的进程。\n\n这些指令存储在`Dockerfile`中，Docker在构建镜像过程中读取这个`Dockerfile`，运行里面的指令并返回最终的镜像。\n\n### Docker注册中心如何工作的\n\nDocker注册中心是Docker镜像的存储中心，当你构建完一个镜像后便可以将其推送到[Docker Hub](https://hub.docker.com)或你自己的注册中心。\n\n利用Docker客户端，你可以搜索已经发布的镜像，然后将其拉取到你的Docker主机上，以便于从这些镜像中构建容器。\n\n[Docker Hub](https://hub.docker.com)为镜像提供了公共的和私有的存储空间。公共的存储空间任何人均可以在上面搜索和下载，私有存储空间仅对你本人或你的团队开放搜索以及拉取下载，你可以通过[这里](https://hub.docker.com/plans)注册一个私有的存储空间。\n\n### 容器是如何工作的\n\n一个容器包括操作系统、用户添加的文件以及相关的元数据。我们知道，每个容器都是从镜像中构建出来的，这个镜像告诉Docker容器用到什么资源、当容器加载时启动哪个进程以及容器启动时的其他配置。Docker镜像是只读的，当Docker从一个镜像运行一个容器时，它会在镜像的上层添加一个用于运行应用的可读写的层（利用的就是上文提到的union file system）。\n\n### 运行一个容器时到底发生了什么\n\nDocker客户端通过直接运行`docker`或者通过API调用的方式，可以通知Docker的守护进程运行一个容器。\n\n``` shell\n$ sudo docker run -i -t ubuntu /bin/bash\n```\n\n我们来看一下这个命令，Docker客户端利用`docker`命令跟一个`run`的选项启动一个容器，一个最小配置的Docker客户端运行一个容器需要告诉Docker守护进程以下事项：\n\n* 此容器基于什么镜像来构建，此处是`ubuntu`——一个基础的Ubuntu镜像；\n* 需要在容器中运行的命令，此处是`/bin/bash`——在容器中启动一个Bash Shell。\n\n那么我们看看运行上述命令时到底发生了什么？\n\n按照顺序，Docker依次干了如下事情：\n\n* **拉取`ubuntu`镜像** : Docker首先检查一下`ubuntu`镜像在本地服务器上存不存在，如果不存在，则自动从[Docker Hub](https://hub.docker.com/)中下载，如果已经存在则直接利用这个镜像来启动一个新的容器。\n* **创建一个新的容器**: 如果Docker本地服务器中存在这个镜像，那么就据此来启动一个容器。\n* **分配一个文件每户并且将其挂载到一个可读写的层**: 容器在此文件系统中被创建，并且将其作为一个可读写的层添加到镜像中。\n* **分配一个网络或桥接的接口**: 创建一个网络的接口以便于Docker容器能够访问本机。\n* **设置一个IP地址**: 为此容器从地址池中找到并绑定一个IP地址。\n* **执行指定的进程**: 运行你的应用程序，然后；\n* **获取并提供应用程序的输出**: 连接标准输入、标准输出和标准错误接口，这样你便可以观察到程序运行的一切。\n\n现在你已经运行了一个容器，这样你便可以管理你的容器、与应用程序进行交互，当运行结束是停止或者删除你的容器。\n\n## 底层技术问题\n\nDocker是用Go语言实现的，用到了一些Linux内核的特性实现上述功能。\n\n### 命名空间（namespaces）\n\nDocker在为容器提供一个隔离的工作空间时，用到了`命名空间`的技术，当你运行一个容器时，Docker会为此容器创建一组命名空间。\n\n这样便可以提供一个隔离的层：每个容器运行在自己的命名空间中，而外部不能访问这个层。\n\nDocker用到的一些命名空间有：\n\n* **`pid`命名空间**: 用于隔离进程（PID：Process ID）；\n* **`net`命名空间**: 用于管理网络；\n* **`ipc`命名空间**: 用于访问IPC资源（IPC：InterProcess Communication）；\n* **`mnt`命名空间**: 用于管理挂载点（MNT：Mount）；\n* **`uts`命名空间**: 用于隔离内核和版本标识（UTS：Unix Timesharing System）。\n\n### 控制组（Control Groups）\n\nDocker还用到了另外一项技术叫`cgroups`或者叫控制组（control groups）。实现程序运行环境的隔离的关键在于使这些程序只用到他们需要的资源，这就能够保证这些容器是主机服务环境小社会中的好市民。控制组允许Docker在不同的容器之间共享硬件资源，需要时添加一些限制和约束，例如限制一个容器最大访问内存量。\n\n### 统一文件系统（Union file systems）\n\n统一文件系统或者说是UnionFS，是创建层的时候用到的文件系统，使文件系统非常轻量和快速。Docker使用统一文件系统为容器构建blocks，Docker可以使用几种不同的文件系统：AUFS、btrfs、vfs以及DeviceMapper。\n\n### 容器格式\n\nDocker容器将这些组件合并在一起，我们称之为容器格式，容器的缺省格式称为`libcontainer`。Docker还支持利用[LXC](https://linuxcontainers.org/)技术的传统Linux容器格式，未来还将会支持其他的容器格式，例如：与BSD Jails或者Solaris Zones实现整合。\n\n## 下一步\n\n安装Docker，请参照[installation section](https://docs.docker.com/installation/#installation)\n\nDocker用户指南，请参照[深入学习Docker](https://docs.docker.com/userguide/)\n\n\n\n\n\n\n\n\n","slug":"understanding-docker","updated":1423485428000,"excerpt":"","_id":"lkmiobgn03quv7zt","categories":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"读书笔记","_id":"zwxrxagyy43uw0zo","posts":["i5y2v58kn5n4101t","p8vajo8vb6hsidju"]},{"name":"Linux github","_id":"c3c0q186z15uhmoa","posts":[]},{"name":"Linux","_id":"08my9oyremlr52if","posts":["wul2u59sop2jqtpb","im9h5eo4uzlymfpy"]},{"name":"Python","_id":"f4cd6j6djf4jhuyf","posts":["5w4yezchyu260oc2"]},{"name":"虚拟化","_id":"ppd5srm1dc91ylbi","posts":["lkmiobgn03quv7zt"]},{"name":"Misc","_id":"vwdusz13gct06oiu","posts":["qxjc3qb8la34mx76"]}]}